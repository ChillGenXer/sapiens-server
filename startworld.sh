#!/usr/bin/env bash

# Script for starting the server.  Its purpose is to start the server and automatically
# restart it if a non-zero argument is returned on exit, implying a crash.  On a crash or a normal stop
# the log files are stored in the logs backup folder.

cd $HOME/sapiens-server

required_files=("constants.sh" "bootstrap.sh" "config.sh")
for file in "${required_files[@]}"; do
    if ! source "$file"; then
        echo "[ERROR]: Failed to source $file. Ensure the file exists in the script directory and is readable."
        echo "If 'config.sh' is missing run ./sapiens.sh install first."
        exit 1
    fi
done

# Script that will archive relevant logs generated by the server.
backup_logs(){
    # Backup filename with timestamp
    TIMESTAMP=$(date +%Y%m%d%H%M%S)
    local backup_file="sapiens_log_backup_$TIMESTAMP.tar.gz"
    logit "DEBUG" "New backup filename: $backup_file"

    # Define full paths for tar operation
    ENET_LOG_DIR=$(dirname "$ENET_LOG")
    logit "DEBUG" "ENET_LOG_DIR: $ENET_LOG_DIR"
    WORLD_LOGS_PARENT_DIR=$(dirname "$WORLD_LOGS_DIR")
    logit "DEBUG" "WORLD_LOGS_PARENT_DIR: $WORLD_LOGS_PARENT_DIR"
    SAPSERVER_LOG_DIR=$(dirname "$SAPSERVER_LOG")
    logit "DEBUG" "SAPSERVER_LOG_DIR: $SAPSERVER_LOG_DIR"

    # Archive the specific log file and the directories of log files
    tar -czf "$backup_file" \
        -C "$ENET_LOG_DIR" "$(basename "$ENET_LOG")" \
        -C "$WORLD_LOGS_PARENT_DIR" "$(basename "$WORLD_LOGS_DIR")" \
        -C "$SAPSERVER_LOG_DIR" "$(basename "$SAPSERVER_LOG")"

    # Move the archive to the log backup dir
    mv "$backup_file" $LOG_BACKUP_DIR

    logit "INFO" "Log Backup created: $LOG_BACKUP_DIR/$backup_file"
}

logit "INFO" "******* startworld.sh has started *******"
logit "INFO" "World ID: $WORLD_ID"
logit "INFO" "Server ID: $SERVER_ID"

logit "INFO" "startworld.sh starting the main server lifecycle loop"
logit "INFO" "Server Command Line Parameters:"
logit "INFO" "    SERVER_ID='$SERVER_ID'"
logit "INFO" "    WORLD_NAME='$WORLD_NAME'"
logit "INFO" "    WORLD_ID='$WORLD_ID'"
logit "INFO" "    UDP_PORT='$UDP_PORT'"
logit "INFO" "    HTTP_PORT='$HTTP_PORT'"
logit "INFO" "    ADVERTISE='$ADVERTISE'"
logit "INFO" "    PROVIDE_LOGS='$PROVIDE_LOGS'"
logit "INFO" "    SAPIENS_DIR='$SAPIENS_DIR'"

# Server lifecycle loop
while true; do
    # Start the server with the configured world's parameters.
    cd $SAPIENS_DIR
    logit "INFO" "Server Starting: ./linuxServer $PROVIDE_LOGS$ADVERTISE--server-id '$SERVER_ID' --load '$WORLD_NAME' --port '$UDP_PORT' --http-port '$HTTP_PORT'"
    ./linuxServer $PROVIDE_LOGS$ADVERTISE--server-id "$SERVER_ID" --load "$WORLD_NAME" --port "$UDP_PORT" --http-port "$HTTP_PORT"
    status=$?
    # Check the exit status of the command.  If it's non-zero we will assume it crashed,
    # save the logs and restart it.
    if [ $status -ne 0 ]; then
        # Server crashed.  Back up the logs
        logit "ERROR" "Fatal Error: World '$WORLD_NAME' crashed with code $status."
        logit "WARN" "Backing up logs and restarting in 5 seconds..."       
        cd $HOME/sapiens-server; backup_logs
    else
        logit "INFO" "World '$WORLD_NAME' stopped gracefully with exit code $status."
        cd $HOME/sapiens-server; backup_logs
        break  # Exit the loop if the server stopped gracefully
    fi
    # Add a delay before restarting the server
    sleep $SHUTDOWN_WAIT
	logit "INFO" "Restarting world $WORLD_NAME..."
done

